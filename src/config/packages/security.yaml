security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Personne
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\EntAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_ENSEIGNANT: ROLE_USER # Un utilisateur avec le rôle ROLE_PROFESEUR aura à minima les droits d'un ROLE_USER
        ROLE_ENSEIGNANT_RES: ROLE_ENSEIGNANT
        ROLE_ETUDIANT: ROLE_USER
        ROLE_SCOLARITE: ROLE_USER
        ROLE_RH: ROLE_USER
        ROLE_ADMIN: [ ROLE_ADMIN, ROLE_ETUDIANT, ROLE_ENSEIGNANT_RES, ROLE_SCOLARITE, ROLE_RH ] # un utilisateur ROLE_ADMIN aura à minima les droits de 4 rôles

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/cour, roles: ROLE_USER }
        - { path: ^/ueValide, roles: ROLE_USER }
        - { path: ^/etudiant, roles: ROLE_SCOLARITE }
        - { path: ^/ue, roles: ROLE_SCOLARITE }
        - { path: ^/cursus, roles: ROLE_SCOLARITE }
        - { path: ^/formation, roles: ROLE_SCOLARITE }
        - { path: ^/salle, roles: ROLE_ADMIN }
        - { path: ^/enseignant, roles: ROLE_RH }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
